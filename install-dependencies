#!/usr/bin/env php
<?php
define('INSTALL_DEPENDENCIES_HOME', getenv('INSTALL_DEPENDENCIES_HOME') ?: get_default_home());
define('DEPFILE', 'dependencies.json');
define('VERBOSE', true);

set_error_handler('exception_error_handler');
set_exception_handler('exit_exception_handler');

install_dependencies('.');


function install_dependencies($basedir)
{
    foreach (read_dependeciesfile($basedir . DIRECTORY_SEPARATOR . DEPFILE) as $dest => $url) {
        install_dependency($url, $basedir . DIRECTORY_SEPARATOR . $dest);
    }
}


function install_dependency($source, $dest)
{
    list($checksum, $url) = unpack_source($source);
    $cache = INSTALL_DEPENDENCIES_HOME . DIRECTORY_SEPARATOR . hash_url($url);
    if (!file_exists($cache)) {
        unlink(install(download($url, $checksum), $cache));
        install_dependencies(skip_initial_directory($cache));
    }
    install_link(release_dir($cache, $url), $dest);
}


function download($url, $checksum = false)
{
    info("downloading $url");
    $ch = curl_init($url);
    $filename = sys_get_temp_dir() . DIRECTORY_SEPARATOR . basename(parse_url($url, PHP_URL_PATH));
    $fp = fopen($filename, 'w');
    curl_setopt($ch, CURLOPT_FILE, $fp);
    //curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_exec($ch);
    curl_close($ch);
    fclose($fp);
    $filesum = sha1_file($filename);
    info("sha1_file $filesum");
    if ($checksum) assert($checksum == $filesum, 'checksum');
    assert(filesize($filename), 'download');
    return $filename;
}


function install($filename, $dest)
{
    info("extracting $dest");
    mkdir($dest, 0755, true);
    try {
        do {
            $last_filename = $filename;
            $filename = call_user_func(install_callback($filename), $filename, $dest);
        } while ($filename);
    } catch (Exception $e) {
        rmdir($dest);
        throw $e;
    }
    return $last_filename;
}


function install_callback($filename)
{
    switch (mime_type_file($filename)) {
    case 'application/zip':
        return 'unzip';
    case 'application/x-tar':
        return 'untar';
    case 'application/x-gzip':
        return 'ungzip';
    default:
        return 'copy';
    }
}


function unzip($filename, $dest)
{
    $zip = new ZipArchive();
    $zip->open($filename);
    $zip->extractTo($dest);
    $zip->close();
}


function ungzip($filename, $dest)
{
    $p = new PharData($filename);
    $p->decompress();
    return fileinfo($filename, PATHINFO_FILENAME);
}


function untar($filename, $dest)
{
    $p = new PharData($filename);
    $p->extractTo($dest);
}


function install_link($target, $dest)
{
    info("linking $dest");
    assert(file_exists($target), "install_link $target");
    if (is_link($dest) || file_exists($dest))
        is_windows() ? rmdir($dest) : unlink($dest);
    if (!file_exists(dirname($dest)))
        mkdir(dirname($dest), 0755, true);
    symlink($target, $dest);
}


function unpack_source($url)
{
    $data = preg_split('/\s+/', $url);
    if (1 == count($data)) {
        array_unshift($data, false);
    }
    return $data;
}


function mime_type_file($filename)
{
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime_type = finfo_file($finfo, $filename);
    finfo_close($finfo);
    return $mime_type;
}


function release_dir($cache, $url)
{
    $path = skip_initial_directory($cache);
    $sub = parse_url($url, PHP_URL_FRAGMENT);
    return $sub ? $path . DIRECTORY_SEPARATOR . $sub : $path;
}


function skip_initial_directory($directory)
{
    $files = glob($directory . DIRECTORY_SEPARATOR . '*');
    return (1 === count($files) && is_dir($files[0])) ? $files[0] : $directory;
}


function hash_url($url)
{
    return sha1(preg_replace('/#.+$/', '', $url));
}


function read_dependeciesfile($filename)
{
    $data = file_exists($filename) ? read_json($filename) : new stdClass();
    if (!is_object($data))
        throw new Exception(sprintf("Invalid json decoding of %s must be an object but got %s.", $filename, gettype($data)));
    return $data;
}


function read_json($filename)
{
    return json_decode(file_get_contents($filename));
}


function get_default_home()
{
    return get_user_home() . DIRECTORY_SEPARATOR . '.install-dependencies';
}


function get_user_home()
{
    return is_windows() ? $_SERVER['USERPROFILE'] : $_SERVER['HOME'];
}


function is_windows()
{
    return strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
}


function info($line)
{
    if (VERBOSE) {
        echo "$line\n";
    }
}


function exception_error_handler($errno, $errstr, $errfile, $errline )
{
    throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
}


function exit_exception_handler($e)
{
    fwrite(STDERR, $e->getMessage() . ' on line ' . $e->getLine() . "\n");
    exit($e->getCode() ?: 1);
}
