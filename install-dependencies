#!/usr/bin/env php
<?php
define('INSTALL_DEPENDENCIES_HOME', getenv('INSTALL_DEPENDENCIES_HOME') ?: get_default_home());
define('INSTALL_DEPENDENCIES_FILE', getenv('INSTALL_DEPENDENCIES_FILE') ?: 'Dependencies');
define('SUPPORTED_ALGOS', 'sha256|sha384|sha512');

assert(version_compare(PHP_VERSION, '5.6.0', '>='));
assert(extension_loaded('curl'), 'curl extension required');
assert(extension_loaded('hash'), 'hash extension required');

set_error_handler('exception_error_handler');
set_exception_handler('exit_exception_handler');

install_dependencies('.');
exit;


function install_dependencies($basedir)
{
    foreach (read_dependenciesfile($basedir . DIRECTORY_SEPARATOR . INSTALL_DEPENDENCIES_FILE) as $dest => $url) {
        install_dependency($url, $basedir . DIRECTORY_SEPARATOR . $dest);
    }
}


function install_dependency($source, $dest)
{
    list($url, $algo, $checksum) = unpack_source($source);
    $cache = INSTALL_DEPENDENCIES_HOME . DIRECTORY_SEPARATOR . hash_url($url);
    if (!file_exists($cache)) {
        unlink(install(download($url, $algo, $checksum), $cache));
        install_dependencies(skip_initial_directory($cache));
    }
    install_link(release_dir($cache, $url), $dest);
}


function download($url, $algo, $checksum)
{
    info("Downloading $url");
    $ch = curl_init($url);
    $filename = tempnam(sys_get_temp_dir(), 'dep');
    $fp = fopen($filename, 'w');
    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_exec($ch);
    curl_close($ch);
    fclose($fp);
    $filesum = checksum($filename, $algo);
    info("Checksum $algo-$filesum");
    if ($checksum) assert($checksum == $filesum, 'checksum');
    assert(filesize($filename), 'download');
    return $filename;
}


function install($filename, $dest)
{
    call_user_func(install_callback($filename), $filename, $dest);
    readonly($dest);
    return $filename;
}


function install_callback($filename)
{
    switch (mime_type_file($filename)) {
    case 'application/zip':
        return 'install_unzip';
    default:
        return 'install_copy';
    }
}


function install_unzip($filename, $dest)
{
    info("Unzipping $dest");
    mkdir($dest, 0755, true);
    try {
        $zip = new ZipArchive();
        $zip->open($filename);
        $zip->extractTo($dest);
        $zip->close();
    } catch (Exception $e) {
        rmdir($dest);
        throw $e;
    }
}


function install_copy($filename, $dest)
{
    info("Copying $dest");
    if (!file_exists(dirname($dest))) {
        mkdir(dirname($dest), 0755, true);
    }
    copy($filename, $dest);
}


function install_link($target, $dest)
{
    info("Linking $dest");
    assert(file_exists($target), "install_link $target");
    if (is_link($dest) || file_exists($dest))
        is_windows() ? rmdir($dest) : unlink($dest);
    if (!file_exists(dirname($dest)))
        mkdir(dirname($dest), 0755, true);
    symlink($target, $dest);
}


function unpack_source($url)
{
    $data = preg_split('/\s+/', $url);
    assert(count($data) <= 2, "invalid url line: '$url'");
    if (!empty($data[1]) && preg_match('/^('.SUPPORTED_ALGOS.')-(.+)/i', $data[1], $matches)) {
        $data[1] = $matches[1];
        $data[2] = $matches[2];
    } else {
        // use default, either checksum is invalid or not specified
        array_push($data, strstr(SUPPORTED_ALGOS, '|', true), false);
    }
    return $data; // [ url algo checksum|false ]
}


function checksum($filename, $algo)
{
    return base64_encode(hash_file($algo, $filename, true));
}


function mime_type_file($filename)
{
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime_type = finfo_file($finfo, $filename);
    finfo_close($finfo);
    return $mime_type;
}


function release_dir($cache, $url)
{
    $path = skip_initial_directory($cache);
    $sub = parse_url($url, PHP_URL_FRAGMENT);
    return $sub ? $path . DIRECTORY_SEPARATOR . $sub : $path;
}


function skip_initial_directory($directory)
{
    $files = glob($directory . DIRECTORY_SEPARATOR . '*');
    return (1 === count($files) && is_dir($files[0])) ? $files[0] : $directory;
}


function hash_url($url)
{
    return sha1(preg_replace('/#.+$/', '', $url));
}


function readonly($filename) {
    array_map('readonly', (array) glob("$filename/*"));
    chmod($filename, fileperms($filename) & 0555);
}


function read_dependenciesfile($filename)
{
    return file_exists($filename) ? read_dependencies($filename) : array();
}


function read_dependencies($filename)
{
    $content = strip_octothorpe(file_get_contents($filename));
    $lines = preg_split('/\n/', $content);
    $result = array();
    foreach ($lines as $line) {
        $line = trim($line);
        if ($line) {
            list($dest, $url) = preg_split('/\s+/', $line, 2);
            $result[$dest] = trim($url);
        }
    }
    return $result;
}

function strip_octothorpe($string)
{
    return preg_replace('/^\s#.*$/m', '', $string);
}

function get_default_home()
{
    return get_user_home() . DIRECTORY_SEPARATOR . '.install-dependencies';
}


function get_user_home()
{
    return is_windows() ? $_SERVER['USERPROFILE'] : $_SERVER['HOME'];
}


function is_windows()
{
    return strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
}


function info($line)
{
    echo "$line\n";
}


function exception_error_handler($errno, $errstr, $errfile, $errline )
{
    $errstr = "$errstr on line $errline\n";
    if (is_windows() && preg_match('/^symlink.*\(1314\)/', $errstr)) {
        $errstr = "$errstr
Creation of symbolic links requires the SeCreateSymbolicLinkPrivilege
(\"Create symbolic links\"), which is granted only to administrators by default
(but you can change that using security policy).

Now that you know, you most likely just want to open a prompt as administrator.
        ";
    }
    throw new ErrorException($errstr, $errno, 0, $errfile, $errline);
}


function exit_exception_handler($e)
{
    fwrite(STDERR, $e->getMessage());
    exit($e->getCode() ?: 1);
}
